---
import { IoChevronBack, IoChevronForward, IoCloseOutline, IoMenu } from "react-icons/io5";
import DemoLayout from "../../layouts/DemoLayout.astro";

const galleryImages = [
  { src: "https://images.pexels.com/photos/2825236/pexels-photo-2825236.jpeg", alt: "Gallery image 1" },
  { src: "https://images.pexels.com/photos/4572176/pexels-photo-4572176.jpeg", alt: "Gallery image 2" },
  { src: "https://images.pexels.com/photos/17304112/pexels-photo-17304112.jpeg", alt: "Gallery image 3" },
  { src: "https://images.pexels.com/photos/33846137/pexels-photo-33846137.jpeg", alt: "Gallery image 4" }
];
---

<!-- Add meta viewport for mobile-first -->
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
</head>

<DemoLayout>
  <!-- Navbar - always visible, background changes based on video visibility -->
  <nav id="navbar" class="fixed top-0 left-0 w-full h-14 sm:h-16 z-40 transition-all duration-500 ease-out px-2 sm:px-0">
    <div class="container mx-auto px-2 sm:px-4 h-full flex items-center justify-between">
      <div class="flex items-center">
        <h1 class="text-base sm:text-xl font-bold transition-colors duration-500">Scroll Video Demo</h1>
      </div>
      <button id="menuBtn" aria-label="Open menu" class="block sm:hidden ml-2 p-2 rounded focus:outline-none bg-transparent" style="font-size: 24px;">
      <IoMenu color="white"/>
      </button>
      <div id="navbarLinks" class="hidden sm:flex items-center space-x-2 sm:space-x-6">
        <a href="#gallery" class="text-xs sm:text-base hover:opacity-80 transition-all duration-300">Gallery</a>
        <a href="#about" class="text-xs sm:text-base hover:opacity-80 transition-all duration-300">About</a>
        <a href="/" class="bg-indigo-600 text-white px-2 py-1 sm:px-4 sm:py-2 rounded-md hover:bg-indigo-700 transition-colors text-xs sm:text-base">Home</a>
      </div>
    </div>
  </nav>
  <div id="mobileMenuOverlay" class="fixed inset-0 bg-black bg-opacity-40 z-40 transition-opacity duration-300 opacity-0 pointer-events-none"></div>

  <!-- Video scroll section -->
  <div class="scroll-container relative">
    <!-- Create a long scrollable container for the scroll trigger -->
    <div class="spacer" style="height: 500vh;"></div>
    
    <!-- Fixed position image that changes based on scroll -->
    <img 
      id="Background" 
      class="fixed top-0 left-0 w-full h-full object-cover z-10" 
      style="min-width: 100vw; min-height: 100vh; will-change: transform, opacity;" 
      src="/background/13938017-hd_1920_1080_25fps_000.webp" 
      alt="Scrolling video frames" 
    />
    
    <!-- Overlay content -->
    <div id="overlayStart" class="fixed top-0 left-0 w-full h-full z-20 flex items-center justify-center pointer-events-none">
      <div class="text-white text-center bg-transparent bg-opacity-90 p-6 sm:p-16 rounded-2xl flex flex-col items-center gap-4">
        <h1 class="text-2xl sm:text-5xl font-extrabold mb-4 sm:mb-8">Welcome to the Scroll Animation</h1>
        <p class="text-lg sm:text-2xl mb-4">Start scrolling to begin the experience</p>
        <button id="startBtn" class="bg-white text-indigo-700 font-bold px-6 py-3 rounded-lg shadow-lg text-lg sm:text-xl hover:bg-indigo-100 transition-colors">Start</button>
      </div>
    </div>
    <div id="overlay" class="fixed top-0 left-0 w-full h-full z-20 flex items-center justify-center pointer-events-none">
      <div class="text-white text-center bg-transparent bg-opacity-50 p-2 sm:p-8 rounded-lg ">
        <h1 class="text-lg sm:text-4xl font-bold mb-2 sm:mb-4">Scroll Video</h1>
        <p class="text-xs sm:text-lg">Scroll to see the animation</p>
      </div>
    </div>
  </div>

  <!-- Content after video scroll -->
  <div id="content-after-video" class="relative z-30 bg-white min-h-screen pt-14 sm:pt-16">
    <div class="container mx-auto px-2 sm:px-4 py-8 sm:py-16">
      <h2 id="gallery" class="text-lg sm:text-4xl font-bold text-center mb-6 sm:mb-12 text-gray-900">Gallery</h2>
      
      <div id="gallery" class="grid grid-cols-1 xs:grid-cols-2 sm:grid-cols-2 md:grid-cols-4 gap-2 sm:gap-6">
        {galleryImages.map((img, idx) => (
          <div class="bg-gray-100 aspect-square rounded-lg overflow-hidden cursor-pointer" style="min-width: 80px; min-height: 80px;" onclick={`openModal(${idx})`}>
            <img src={img.src} alt={img.alt} class="w-full h-full object-cover" style="min-width: 80px; min-height: 80px;" />
          </div>
        ))}
      </div>

      <!-- Modal for gallery images -->
      <div id="galleryModal" class="fixed inset-0 z-50 flex items-center justify-center bg-transparent backdrop-blur-xs bg-opacity-80 transition-opacity duration-300 opacity-0 pointer-events-none">
        <button id="closeModalBtn" class="absolute top-4 right-4 text-white text-3xl font-bold bg-black bg-opacity-40 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-70 transition-colors z-60"><IoCloseOutline /></button>
        <div class="absolute top-0 left-0 w-full h-full" id="modalOverlay" style="cursor:pointer;"></div>
        <div class="relative w-full h-full flex flex-col items-center justify-center">
          <button id="prevImgBtn" class="absolute left-4 top-1/2 -translate-y-1/2 bg-black bg-opacity-40 text-white rounded-full w-10 h-10 flex items-center justify-center text-2xl hover:bg-opacity-70 transition-colors z-60"><IoChevronBack /></button>
          <img id="modalImg" src="" alt="Gallery modal" class="max-w-full max-h-[80vh] rounded shadow-lg" style="object-fit:contain;" />
          <button id="nextImgBtn" class="absolute right-4 top-1/2 -translate-y-1/2 bg-black bg-opacity-40 text-white rounded-full w-10 h-10 flex items-center justify-center text-2xl hover:bg-opacity-70 transition-colors z-60"><IoChevronForward/></button>
        </div>
      </div>

      <!-- Additional content -->
      <div id="about" class="mt-8 sm:mt-16 text-center">
        <h3 class="text-base sm:text-2xl font-bold mb-2 sm:mb-4 text-gray-900">About This Animation</h3>
        <p class="text-xs sm:text-gray-600 max-w-xs sm:max-w-2xl mx-auto leading-relaxed">
          This scroll-triggered video demonstrates advanced web animation techniques using GSAP and ScrollTrigger. 
          The sequence contains 278 individual frames that create a smooth cinematic experience.
        </p>
      </div>

      <!-- More content sections -->
      <div class="mt-8 sm:mt-16 grid grid-cols-1 sm:grid-cols-3 gap-4 sm:gap-8">
        <div class="text-center p-2 sm:p-6 bg-gray-50 rounded-lg">
          <h4 class="text-xs sm:text-lg font-semibold mb-1 sm:mb-2 text-gray-900">Technology</h4>
          <p class="text-xs sm:text-gray-600">Built with GSAP ScrollTrigger for smooth scroll animations</p>
        </div>
        <div class="text-center p-2 sm:p-6 bg-gray-50 rounded-lg">
          <h4 class="text-xs sm:text-lg font-semibold mb-1 sm:mb-2 text-gray-900">Performance</h4>
          <p class="text-xs sm:text-gray-600">Optimized loading and frame sequencing for best experience</p>
        </div>
        <div class="text-center p-2 sm:p-6 bg-gray-50 rounded-lg">
          <h4 class="text-xs sm:text-lg font-semibold mb-1 sm:mb-2 text-gray-900">Design</h4>
          <p class="text-xs sm:text-gray-600">Cinematic storytelling through interactive scroll</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Loader overlay -->
  <div id="pageLoader" class="fixed inset-0 z-[9999] flex items-center justify-center bg-white bg-opacity-95 transition-opacity duration-500">
    <div class="flex flex-col items-center">
      <svg class="animate-spin h-20 w-20 text-indigo-400 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
      </svg>
      <span class="text-gray-700 text-lg font-semibold">Cargando...</span>
    </div>
  </div>
</DemoLayout>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  // Make galleryImages available in window for modal logic
  (window as typeof window & { galleryImages: typeof galleryImages }).galleryImages = [
   { src: "https://images.pexels.com/photos/2825236/pexels-photo-2825236.jpeg", alt: "Gallery image 1" },
  { src: "https://images.pexels.com/photos/4572176/pexels-photo-4572176.jpeg", alt: "Gallery image 2" },
  { src: "https://images.pexels.com/photos/17304112/pexels-photo-17304112.jpeg", alt: "Gallery image 3" },
  { src: "https://images.pexels.com/photos/33846137/pexels-photo-33846137.jpeg", alt: "Gallery image 4" }
  ];

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    const imgElement = document.getElementById('Background') as HTMLImageElement;
    const overlayElement = document.getElementById('overlay') as HTMLElement;
    const navbarElement = document.getElementById('navbar') as HTMLElement;
    const totalFrames = 278; // Based on your available images (000-278)
    let lastFrameNumber = -1;
    const pageLoader = document.getElementById('pageLoader');
    let loadedFrames = 0;
    let loadedGallery = 0;
    const totalGallery = window.galleryImages.length;

    // Preload all frames for smoother experience
    for (let i = 0; i <= totalFrames; i++) {
      const preloadImg = new window.Image();
      preloadImg.src = `/background/13938017-hd_1920_1080_25fps_${String(i).padStart(3, "0")}.webp`;
      preloadImg.onload = () => {
        loadedFrames++;
        if (loadedFrames === totalFrames + 1 && loadedGallery === totalGallery && pageLoader) {
          pageLoader.style.opacity = '0';
          setTimeout(() => { pageLoader.style.display = 'none'; }, 500);
        }
      };
    }
    // Preload gallery images
    window.galleryImages.forEach(img => {
      const preloadImg = new window.Image();
      preloadImg.src = img.src;
      preloadImg.onload = () => {
        loadedGallery++;
        if (loadedFrames === totalFrames + 1 && loadedGallery === totalGallery && pageLoader) {
          pageLoader.style.opacity = '0';
          setTimeout(() => { pageLoader.style.display = 'none'; }, 500);
        }
      };
    });

    if (imgElement && overlayElement && navbarElement) {
      // Set initial state for overlay - invisible and small
      gsap.set(overlayElement, { opacity: 0 });
      gsap.set(overlayElement.querySelector('div'), { scale: 0.3 });
      
      // Initialize navbar with transparent background for video section
      gsap.set(navbarElement, { 
        backgroundColor: "rgba(255, 255, 255, 0)"
      });
      
      // Set initial text colors for transparent state
      const navTitle = navbarElement.querySelector('h1');
      const navLinks = navbarElement.querySelectorAll('a:not([href="/"])');
      
      gsap.set(navTitle, { color: "white" });
      gsap.set(navLinks, { color: "rgba(255, 255, 255, 0.9)" });

      // Create a timeline for the image sequence AND overlay control
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: ".scroll-container",
          start: "top top",
          end: "bottom bottom",
          scrub: 0.1, // Faster response to scroll for smoother animation
          onUpdate: (self) => {
            // Calculate which frame to show based on scroll progress
            const frame = Math.floor(self.progress * totalFrames);
            const frameNumber = Math.min(frame, totalFrames);
            if (frameNumber !== lastFrameNumber) {
              lastFrameNumber = frameNumber;
              const paddedFrame = String(frameNumber).padStart(3, "0");
              // Update the image source only if frame changes
              imgElement.src = `/background/13938017-hd_1920_1080_25fps_${paddedFrame}.webp`;
            }
            // Error handling for blocked images
            imgElement.onerror = function() {
              imgElement.style.display = 'none';
            };
            imgElement.onload = function() {
              imgElement.style.display = '';
            };
            // Control overlay visibility based on scroll progress
            // Overlay appears between 40% and 60% of scroll progress
            let overlayOpacity = 0;
            let overlayScale = 0.3;
            const progress = self.progress;
            if (progress >= 0.4 && progress <= 0.6) {
              const localProgress = (progress - 0.4) / 0.2; // 0 to 1
              overlayOpacity = localProgress;
              overlayScale = 0.3 + (localProgress * 0.7); // 0.3 to 1.0
            } else if (progress > 0.6) {
              // Keep visible after 60%
              overlayOpacity = 1;
              overlayScale = 1;
            }
            
            // Apply overlay transformations
            gsap.set(overlayElement, { opacity: overlayOpacity });
            gsap.set(overlayElement.querySelector('div'), { scale: overlayScale });
          },
          onLeave: () => {
            // Hide video elements when scroll section ends
            gsap.to([imgElement, overlayElement], {
              opacity: 0,
              duration: 0.5,
              ease: "power2.inOut"
            });
            // Change navbar to solid background when video section ends
            gsap.to(navbarElement, {
              backgroundColor: "rgba(255, 255, 255, 1)",
              boxShadow: "0 4px 6px -1px rgba(0, 0, 0, 0.1)",
              backdropFilter: "none",
              duration: 0.6,
              ease: "power2.out"
            });
            // Change text colors to dark for solid background
            const navTitle = navbarElement.querySelector('h1');
            const navLinks = navbarElement.querySelectorAll('a:not([href="/"])');
            gsap.to(navTitle, { 
              color: "#111827", // text-gray-900
              duration: 0.6,
              ease: "power2.out"
            });
            gsap.to(navLinks, { 
              color: "#4B5563", // text-gray-600
              duration: 0.6,
              ease: "power2.out"
            });
          },
          onEnterBack: () => {
            // Show video elements when scrolling back into section
            gsap.to(imgElement, {
              opacity: 1,
              duration: 0.5,
              ease: "power2.inOut"
            });
            // Change navbar back to fully transparent when in video section (no blur)
            gsap.to(navbarElement, {
              backgroundColor: "rgba(255, 255, 255, 0)",
              boxShadow: "none",
              backdropFilter: "none",
              duration: 0.6,
              ease: "power2.out"
            });
            // Change text colors back to light for transparent background
            const navTitle = navbarElement.querySelector('h1');
            const navLinks = navbarElement.querySelectorAll('a:not([href="/"])');
            gsap.to(navTitle, { 
              color: "white",
              duration: 0.6,
              ease: "power2.out"
            });
            gsap.to(navLinks, { 
              color: "rgba(255, 255, 255, 0.9)",
              duration: 0.6,
              ease: "power2.out"
            });
            // Don't force overlay to visible - let onUpdate handle it
          },
          onLeaveBack: () => {
            // Ensure overlay is hidden when going back to beginning
            gsap.set(overlayElement, { opacity: 0 });
            gsap.set(overlayElement.querySelector('div'), { scale: 0.3 });
            // Keep navbar transparent when leaving video section backwards
            gsap.to(navbarElement, {
              backgroundColor: "rgba(255, 255, 255, 0)",
              boxShadow: "none",
              backdropFilter: "none",
              duration: 0.6,
              ease: "power2.out"
            });
            // Keep text colors light
            const navTitle = navbarElement.querySelector('h1');
            const navLinks = navbarElement.querySelectorAll('a:not([href="/"])');
            gsap.to(navTitle, { 
              color: "white",
              duration: 0.6,
              ease: "power2.out"
            });
            gsap.to(navLinks, { 
              color: "rgba(255, 255, 255, 0.9)",
              duration: 0.6,
              ease: "power2.out"
            });
          }
        }
      });

      // Optional: Add some scale animation for extra effect
      tl.fromTo(imgElement, 
        { scale: 1 }, 
        { scale: 1.1, duration: 1, ease: "none" }
      );
    }

    // Smooth scroll for navbar links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const href = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
        const target = href ? document.querySelector(href) : null;
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });

    // Animate gallery items when they come into view
    const galleryItems = document.querySelectorAll('#gallery > div');
    galleryItems.forEach((item, index) => {
      gsap.fromTo(item, 
        { opacity: 0, y: 50 },
        {
          opacity: 1,
          y: 0,
          duration: 0.8,
          ease: "power2.out",
          scrollTrigger: {
            trigger: item,
            start: "top 80%",
            end: "bottom 20%",
            toggleActions: "play none none reverse"
          },
          delay: index * 0.1 // Stagger animation
        }
      );
    });

    // Gallery modal logic
    let currentImgIdx = 0;
    const galleryModal = document.getElementById('galleryModal');
    const modalImg = document.getElementById('modalImg');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const prevImgBtn = document.getElementById('prevImgBtn');
    const nextImgBtn = document.getElementById('nextImgBtn');
    const modalOverlay = document.getElementById('modalOverlay');
    const navbar = document.getElementById('navbar');
    const galleryThumbs = document.querySelectorAll('#gallery > div');

    function openModal(idx) {
      currentImgIdx = idx;
      if (modalImg && window.galleryImages) {
        modalImg.setAttribute('src', window.galleryImages[currentImgIdx].src);
        modalImg.setAttribute('alt', window.galleryImages[currentImgIdx].alt);
      }
      if (galleryModal) {
        galleryModal.style.opacity = '1';
        galleryModal.style.pointerEvents = 'auto';
      }
      if (navbar) navbar.style.display = 'none';
      document.body.style.overflow = 'hidden';
    }

    function closeModal() {
      if (galleryModal) {
        galleryModal.style.opacity = '0';
        galleryModal.style.pointerEvents = 'none';
      }
      if (navbar) navbar.style.display = '';
      document.body.style.overflow = '';
    }

    function showImg(idx) {
      currentImgIdx = idx;
      if (modalImg && window.galleryImages) {
        modalImg.setAttribute('src', window.galleryImages[currentImgIdx].src);
        modalImg.setAttribute('alt', window.galleryImages[currentImgIdx].alt);
      }
    }

    if (closeModalBtn) closeModalBtn.onclick = closeModal;
    if (prevImgBtn) prevImgBtn.onclick = function() {
      showImg((currentImgIdx - 1 + window.galleryImages.length) % window.galleryImages.length);
    };
    if (nextImgBtn) nextImgBtn.onclick = function() {
      showImg((currentImgIdx + 1) % window.galleryImages.length);
    };
    if (modalOverlay) modalOverlay.onclick = closeModal;
    // Add click listeners to gallery images
    galleryThumbs.forEach((thumb, idx) => {
      thumb.addEventListener('click', () => openModal(idx));
    });

    // Mobile menu logic
    const menuBtn = document.getElementById('menuBtn');
    const menuIcon = document.getElementById('menuIcon') as HTMLElement;
    const navbarLinks = document.getElementById('navbarLinks') as HTMLElement;
    const mobileMenuOverlay = document.getElementById('mobileMenuOverlay') as HTMLElement;
    let menuOpen = false;
    function toggleMenu() {
      menuOpen = !menuOpen;
      if (menuOpen) {
        navbarLinks.classList.remove('hidden');
        navbarLinks.classList.add('flex');
        navbarLinks.style.flexDirection = 'column';
        navbarLinks.style.background = 'rgba(255,255,255,0.0)';
        navbarLinks.style.position = 'absolute';
        navbarLinks.style.top = '100%';
        navbarLinks.style.left = '0';
        navbarLinks.style.width = '100vw';
        navbarLinks.style.zIndex = '50';
        navbarLinks.style.padding = '16px 0';
        // Add spacing and font size to anchor tags
        navbarLinks.querySelectorAll('a').forEach(a => {
          a.style.margin = '12px 0';
          a.style.fontSize = '1.1rem';
          a.style.textAlign = 'center';
        });
        mobileMenuOverlay.style.background = 'rgba(0,0,0,0.05)';
        mobileMenuOverlay.style.opacity = '1';
        mobileMenuOverlay.style.pointerEvents = 'auto';
        // Animate icon to X
        menuIcon.innerHTML = '<line x1="4" y1="4" x2="20" y2="20" /><line x1="20" y1="4" x2="4" y2="20" />';
      } else {
        navbarLinks.classList.remove('flex');
        navbarLinks.classList.add('hidden');
        navbarLinks.style.flexDirection = '';
        navbarLinks.style.background = '';
        navbarLinks.style.position = '';
        navbarLinks.style.top = '';
        navbarLinks.style.left = '';
        navbarLinks.style.width = '';
        navbarLinks.style.zIndex = '';
        navbarLinks.style.padding = '';
        // Reset anchor styles
        navbarLinks.querySelectorAll('a').forEach(a => {
          a.style.margin = '';
          a.style.fontSize = '';
          a.style.textAlign = '';
        });
        mobileMenuOverlay.style.opacity = '0';
        mobileMenuOverlay.style.pointerEvents = 'none';
        mobileMenuOverlay.style.background = '';
        // Animate icon to hamburger
        menuIcon.innerHTML = '<line x1="3" y1="6" x2="21" y2="6" /><line x1="3" y1="12" x2="21" y2="12" /><line x1="3" y1="18" x2="21" y2="18" />';
      }
    }
    if (menuBtn) menuBtn.onclick = toggleMenu;
    if (mobileMenuOverlay) mobileMenuOverlay.onclick = function() {
      if (menuOpen) toggleMenu();
    };
  });
</script>

<style>
@media (max-width: 300px) {
  .container {
    padding-left: 2px !important;
    padding-right: 2px !important;
  }
  h1, h2, h3, h4, p, a, button {
    font-size: 10px !important;
    line-height: 1.1 !important;
  }
  #navbar {
    height: 32px !important;
    min-height: 32px !important;
    padding: 0 2px !important;
  }
  #gallery > div {
    min-width: 60px !important;
    min-height: 60px !important;
  }
  #galleryModal > div {
    max-width: 90vw !important;
    padding: 2px !important;
  }
  #modalImg {
    max-height: 30vh !important;
  }
}
#galleryModal {
  opacity: 0;
  pointer-events: none;
}
#galleryModal[style*="opacity: 1"] {
  opacity: 1 !important;
  pointer-events: auto !important;
}
@media (min-width: 1200px) {
  #menuBtn {
    display: block !important;
  }
}
@media (max-width: 1199px) {
  #menuBtn {
    display: none !important;
  }
}
@media (max-width: 639px) {
  #menuBtn {
    display: block !important;
  }
  #navbarLinks {
    display: none !important;
  }
  #navbarLinks.flex {
    display: flex !important;
  }
}
@media (min-width: 640px) {
  #menuBtn {
    display: none !important;
  }
  #navbarLinks {
    display: flex !important;
    position: static !important;
    background: none !important;
    flex-direction: row !important;
    width: auto !important;
    padding: 0 !important;
  }
}
</style>
